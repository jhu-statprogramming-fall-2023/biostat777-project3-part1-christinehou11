[{"path":"/articles/Example_analysis.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data Wrangling","title":"Example_analysis","text":"source showing Cocktail data analysis comes TidyTuesday, May 26th 2020. totally 2 different .csv data website, choose one personal preferences. Let’s quick look dataset. Notice exists NA values dataset, careful afterwards visualizations. totally 2104 rows 13 variables dataset. data dictionary column names mean. https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-05-26#cocktailscsv:~:text=Data%20Dictionary-,cocktails,-.csv analysis, like know number ingredients used related different categories alcoholic cocktail drinks?","code":"# Test if a directory named data exists locally if (!dir.exists(here::here(\"data\"))) {     dir.create(here::here(\"data\")) }  # saves data only once  files = c(\"tuesdata_cocktails.rda\") if (any(!file.exists(here::here(\"data\",files)))) {     tuesdata <- tidytuesdayR::tt_load('2020-05-26')     cocktails <- tuesdata$cocktails      # save the files to RDA objects     save(cocktails, file = here::here(\"data\",\"tuesdata_cocktails.rda\")) } # load the data load(here::here(\"data\",\"tuesdata_cocktails.rda\")) #cocktails n_unique <- function(x) length(unique(x)) purrr::map_int(.x = cocktails,          .f = n_unique)            row_id             drink     date_modified          id_drink                546               546               546               546          alcoholic          category       drink_thumb             glass                  5                11               546                36                iba             video ingredient_number        ingredient                  4                 1                12               333            measure                435  purrr::map_chr(.x = cocktails,          .f = typeof)            row_id             drink     date_modified          id_drink           \"double\"       \"character\"          \"double\"          \"double\"          alcoholic          category       drink_thumb             glass        \"character\"       \"character\"       \"character\"       \"character\"                iba             video ingredient_number        ingredient        \"character\"         \"logical\"          \"double\"       \"character\"            measure        \"character\" any(is.na(cocktails)) [1] TRUE dim(cocktails) [1] 2104   13"},{"path":"/articles/Example_analysis.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Example_analysis","text":"consider alcoholi cocktails sample analysis, 478 types alcoholic drinks included.    can use functions jpeg display picture cocktail. example, alcoholic drink 12 ingredients belonging Homemade Liqueur category  can also rewrite jpg higher quality plot clear.","code":"cocktails %>%   filter(alcoholic == \"Alcoholic\")%>%   select(drink)%>%   unique() %>%   nrow() [1] 478 df1 = cocktails %>%   filter(alcoholic == \"Alcoholic\") %>%   select(category,drink, ingredient, ingredient_number) %>%   pivot_wider(names_from = \"ingredient_number\",               values_from = \"ingredient\") %>%   group_by(category) %>%   summarize(n = n())  df1  [38;5;246m# A tibble: 10 × 2 [39m    category                 n     [3m [38;5;246m<chr> [39m [23m                 [3m [38;5;246m<int> [39m [23m  [38;5;250m 1 [39m Beer                    13  [38;5;250m 2 [39m Cocktail                57  [38;5;250m 3 [39m Coffee / Tea            17  [38;5;250m 4 [39m Homemade Liqueur        12  [38;5;250m 5 [39m Milk / Float / Shake    11  [38;5;250m 6 [39m Ordinary Drink         272  [38;5;250m 7 [39m Other/Unknown           12  [38;5;250m 8 [39m Punch / Party Drink     25  [38;5;250m 9 [39m Shot                    49  [38;5;250m10 [39m Soft Drink / Soda       10  df1 %>%   ggplot() +   geom_col(aes(x = category, y = n),            fill = \"#66c2a5\") +   labs(     title = \"Number of Drinks in Alcoholic Cocktail Categories\",     subtitle = \"Ordinary Drink has the most count among all alcoholic drink categories\\nMilk/Float/Shake has the least count\",     x = \"Category\",     y = \"Count\",     caption = \"Christine Hou\"   ) +   theme_classic() +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) df2 = cocktails %>%   filter(alcoholic == \"Alcoholic\") %>%   select(drink, category,ingredient, ingredient_number) %>%   group_by(drink) %>%   summarize(num_ing = n()) %>%   group_by(num_ing) %>%   summarize(num =n()) %>%   mutate(percentage = num/sum(num)*100) %>%   mutate(num_ing = as.factor(num_ing))  df2  [38;5;246m# A tibble: 11 × 3 [39m    num_ing   num percentage     [3m [38;5;246m<fct> [39m [23m    [3m [38;5;246m<int> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m 1           3      0.628  [38;5;250m 2 [39m 2          77     16.1    [38;5;250m 3 [39m 3         156     32.6    [38;5;250m 4 [39m 4         107     22.4    [38;5;250m 5 [39m 5          76     15.9    [38;5;250m 6 [39m 6          42      8.79   [38;5;250m 7 [39m 7           8      1.67   [38;5;250m 8 [39m 8           6      1.26   [38;5;250m 9 [39m 9           1      0.209  [38;5;250m10 [39m 11          1      0.209  [38;5;250m11 [39m 12          1      0.209    df2 %>%   ggplot()+   geom_bar(aes(x = \"\", y = percentage, fill = num_ing),            stat = \"identity\") +   coord_polar(theta = \"y\", start=0) +   theme_void() +   labs(title = \"Distribution of Ingredients Used in Alcoholic Drinks\",     subtitle = \"Most alcoholic drinks use 2-5 ingredients\",     caption = \"Christine Hou\",     fill = \"Number of Ingredients\") df3 = cocktails %>%   filter(alcoholic == \"Alcoholic\") %>%   select(drink, category,ingredient, ingredient_number) %>%   group_by(drink,category) %>%   summarize(num_ing = n(),             .groups = 'drop')  df3  [38;5;246m# A tibble: 478 × 3 [39m    drink                                category             num_ing     [3m [38;5;246m<chr> [39m [23m                                 [3m [38;5;246m<chr> [39m [23m                   [3m [38;5;246m<int> [39m [23m  [38;5;250m 1 [39m '57 Chevy with a White License Plate Cocktail                   2  [38;5;250m 2 [39m 1-900-FUK-MEUP                       Shot                       8  [38;5;250m 3 [39m 110 in the shade                     Beer                       2  [38;5;250m 4 [39m 151 Florida Bushwacker               Milk / Float / Shake       8  [38;5;250m 5 [39m 155 Belmont                          Cocktail                   4  [38;5;250m 6 [39m 24k nightmare                        Shot                       4  [38;5;250m 7 [39m 252                                  Shot                       2  [38;5;250m 8 [39m 3 Wise Men                           Shot                       3  [38;5;250m 9 [39m 3-Mile Long Island Iced Tea          Ordinary Drink             8  [38;5;250m10 [39m 410 Gone                             Ordinary Drink             1  [38;5;246m# ℹ 468 more rows [39m  df3 %>%   ggplot() +   geom_boxplot(aes(x = category, y = num_ing)) +   facet_wrap(~category, scales = \"free\") +   theme_minimal() +   coord_cartesian(ylim = c(0,13)) +   labs(     x = \"Category\",     y = \"Number of Ingredients\",     title = \"Number of Ingredients Used in Alcoholic Drinks\",     subtitle = \"Drinks belonging to Homemade Liqueur category has the highest number of ingredients (12)\\nDrinks belonging to Cocktail and Ordinary Drink category has the least number of ingredients (1)\",     caption = \"Christine Hou\"   ) url = cocktails %>%   filter(category == \"Homemade Liqueur\",          ingredient_number == 12) %>%   pull(drink_thumb)  if (!file.exists(\"homemade.jpg\")) {     download.file(url,               destfile = paste0(getwd(),\"/homemade.jpg\"),               mode = \"wb\") }  myjpeg_array <- readJPEG(source = \"homemade.jpg\")  plot(0:10,0:10,type=\"n\",ann=FALSE,axes=FALSE) rasterImage(myjpeg_array,0,0,6,10) img <- readJPEG(\"homemade.jpg\") r <- writeJPEG(img, raw(), quality=1) img2 <- readJPEG(r) plot(0:10,0:10,type=\"n\",ann=FALSE,axes=FALSE) rasterImage(img2,0,0,6,10)"},{"path":"/articles/Example_analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Example_analysis","text":"totally 478 alcoholic drinks, Ordinary Drink common category. Every drink contains different ingredients inside, drinks contain 3-5 ingredients inside. Drinks belonging Homemade Liqueur category highest number ingredients 12, drinks belonging Cocktail Ordinary Drink category least number ingredients 1.","code":""},{"path":"/articles/Example_analysis.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Example_analysis","text":"purrr map_int() map_chr() jpeg readJPEG() writeJPEG() dplyr, tidyr, lubridate, stringr, forcats filter() select() summarize() group_by() mutate() pull() pivot_wider() ggplot2 geom_bar() geom_col() geom_boxplot() facet_wrap()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Urbanek. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Urbanek S (2023). jpeg: Read write JPEG images. R package version 0.1-10, https://www.rforge.net/jpeg/.","code":"@Manual{,   title = {jpeg: Read and write JPEG images},   author = {Simon Urbanek},   year = {2023},   note = {R package version 0.1-10},   url = {https://www.rforge.net/jpeg/}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"author-of-example-analysis-and-deployed-website-christine-hou","dir":"","previous_headings":"","what":"Author of Example Analysis and Deployed Website: Christine Hou","title":"Read and write JPEG images","text":"package provides easy simple way read, write display bitmap images stored JPEG format. can read write files -memory raw vectors.","code":""},{"path":"/index.html","id":"project-3-part-1","dir":"","previous_headings":"","what":"Project 3 Part 1","title":"Read and write JPEG images","text":"URL GitHub link original R package came : https://github.com/s-u/jpeg URL deployed website: https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-christinehou11/ 6 things customized pkgdown website: Change visual style website using Bootswatch theme called litera Edit color used syntax highlighting code blocks called github-light Override default fonts used main text Hedvig Letters Serif Override default fonts used headings Open Sans Change background bg, foreground fg, navbar/sidebar primary colors using bslib variable Change background color used inline code #2b2b2b","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and write JPEG images","text":"can install development version jpeg like :","code":"install.packages(\"jpeg\")"},{"path":"/index.html","id":"exported-functions","dir":"","previous_headings":"","what":"Exported Functions","title":"Read and write JPEG images","text":"readJPEG(source, native = FALSE): Reads image JPEG file/content raster array. writeJPEG(image, target = raw(), quality = 0.7, bg = “white”, color.space): Write bitmap image JPEG format create JPEG image array matrix.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Read and write JPEG images","text":"basic example shows solve common problem:","code":"library(jpeg)  img<-readJPEG(\"myfile.jpeg\")  plot(1:2, type='n') rasterImage(img, 1, 1.25, 1.1, 1)"},{"path":"/reference/readJPEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a bitmap image stored in the JPEG format — readJPEG","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"Reads image JPEG file/content raster array.","code":""},{"path":"/reference/readJPEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"","code":"readJPEG(source, native = FALSE)"},{"path":"/reference/readJPEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"source Either name file read raw vector   representing JPEG file content. native determines image representation - FALSE   (default) result array, TRUE   result native raster representation.","code":""},{"path":"/reference/readJPEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"native FALSE array dimensions height x width x channels. one channel result matrix. values reals 0 1. native TRUE object class nativeRaster returned instead. latter easily computed efficient way draw using rasterImage. common files decompress RGB (3 channels) Grayscale (1 channel). Note Grayscale images directly used rasterImage unless native set TRUE rasterImage requires RGB RGBA format (nativeRaster always 8-bit RGBA). JPEG support alpha channel, may want use PNG instead situations.","code":""},{"path":"/reference/readJPEG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"CMYK JPEG images saved Adobe Photoshop may inverted ink values due   bug Photoshop. Unfortunately includes sample CMYK   images floating around, beware source   converting result color spaces. readJPEG   preserve values exactly encoded file.","code":""},{"path":[]},{"path":"/reference/readJPEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a bitmap image stored in the JPEG format — readJPEG","text":"","code":"# read a sample file (R logo) img <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"))  # read it also in native format img.n <- readJPEG(system.file(\"img\", \"Rlogo.jpg\", package=\"jpeg\"), TRUE)  # if your R supports it, we'll plot it if (exists(\"rasterImage\")) { # can plot only in R 2.11.0 and higher   plot(1:2, type='n')    rasterImage(img, 1.2, 1.27, 1.8, 1.73)   rasterImage(img.n, 1.5, 1.5, 1.9, 1.8) }"},{"path":"/reference/writeJPEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a bitmap image in JPEG format — writeJPEG","title":"Write a bitmap image in JPEG format — writeJPEG","text":"Create JPEG image array matrix.","code":""},{"path":"/reference/writeJPEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a bitmap image in JPEG format — writeJPEG","text":"","code":"writeJPEG(image, target = raw(), quality = 0.7, bg = \"white\", color.space)"},{"path":"/reference/writeJPEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a bitmap image in JPEG format — writeJPEG","text":"image image represented real matrix array values     range 0 1. Values outside range     clipped. object must either two-dimensional (grayscale     matrix) three dimensional array (third dimension specifying     plane) must either one (grayscale), two (grayscale +     alpha), three (RGB) four (RGB + alpha) planes. (alternative     image specifications see deatils) target Either name file write , binary     connection, raw vector (raw() - default - good     enough) indicating output raw vector. quality JPEG quality - real number 0 (lowest) 1     (highest) controlling quality output. Lower quality     produces smaller, lossy files. bg background color - used input contains alpha     channel since JPEG support storage alpha channel     thus image needs flattened placed     background color. color.space color space image data     interpreted. Defaults \"color.space\" attribute     image NULL interpreted default color space.     color space specified must match image array     dimensions, conversions performed. Currently     supported non-default color space \"CMYK\" four-channel     images (interpreted \"RGBA\" color     space specified).","code":""},{"path":"/reference/writeJPEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a bitmap image in JPEG format — writeJPEG","text":"NULL target either file connection, raw   vector containing compressed JPEG image target raw   vector.","code":""},{"path":"/reference/writeJPEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a bitmap image in JPEG format — writeJPEG","text":"writeJPEG takes image input compresses JPEG   format. image input usually matrix (grayscale images -   dimensions width, height) array (color alpha   images - dimensions width, height, planes) reals. planes   interpreted sequence red, green, blue, alpha.   convenience writeJPEG allows source include alpha   channel, JPEG support alpha channel   blended specified background. Alternative representation image nativeRaster class   integer matrix entry representing one pixel   binary encoded RGBA format (used internally R). can   obtained readJPEG using native = TRUE. Finally, writeJPEG also supports raw array containing RGBA   (CMYK) image bytes. dimensions raw array   planes, width, height (storage interleaved). Currently   4 planes (RGBA CMYK) supported processing RGBA   equivalent native raster. result either stored file (target file   name), send binary connection (target connection)   stored raw vector (target raw vector).","code":""},{"path":"/reference/writeJPEG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write a bitmap image in JPEG format — writeJPEG","text":"Currently writeJPEG produces 8-bit, non-progressive JPEG   format additional tags.","code":""},{"path":[]},{"path":"/reference/writeJPEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a bitmap image in JPEG format — writeJPEG","text":"","code":"# read a sample file (R logo) img <- readJPEG(system.file(\"img\",\"Rlogo.jpg\",package=\"jpeg\")) # write the image into a raw vector - using a low quality r <- writeJPEG(img, raw(), quality=0.3) # read it back again img2 <- readJPEG(r) # it will be slightly different since JPEG is a lossy format # in particular at the low quality max(abs(img - img2)) #> [1] 0.3215686 stopifnot(max(abs(img - img2)) < 0.4)  # try to write a native raster img3 <- readJPEG(system.file(\"img\",\"Rlogo.jpg\",package=\"jpeg\"), TRUE) r2 <- writeJPEG(img3, raw()) img4 <- readJPEG(r2, TRUE) # comparing nativeRaster values is not easy, so let's do write/read again img5 <- readJPEG(writeJPEG(img4, raw())) max(abs(img - img5)) #> [1] 0.1843137 stopifnot(max(abs(img - img5)) < 0.3)"}]
